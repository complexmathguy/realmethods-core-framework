/************************************************************************ 
 * Copyright 2012-2017 realMethods, Inc.  All rights reserved.
 * This software is the proprietary information of realMethods Inc.
 * Use is subject to license terms.
 *************************************************************************/


package com.framework.common.exception;

//***********************************
// Imports
//***********************************
import java.io.PrintStream;
import java.io.PrintWriter;

import com.framework.common.event.FrameworkEventType;

import com.framework.common.misc.Utility;

import com.framework.integration.hook.FrameworkHookManager;
import com.framework.integration.hook.ICheckedExceptionThrownHook;

/**
 * Base class of all Framework checked exceptions.
 * <p>
 * For each instance, a unique identifier is generated by calling:<br>
 * <i>Utility.generateUID()</ii></br>
 * The toString() method includes the host name of the current machine, the uid, and the 
 * exception specific text 
 * <p>
 * @author    realMethods, Inc.
 * @see		  com.framework.common.misc.Utility
 */
public class FrameworkCheckedException extends Exception
{
//************************************************************************    
// Public Methods
//************************************************************************
    /** 
     * Base constructor.
     */
    public FrameworkCheckedException()
    {
        super();   
        
        init(); 
    }

    /** 
     * Constructor with message.
     * @param	message
     */
    public FrameworkCheckedException( String message )
    {
        super( message );   
        
        init();
    }    

    /**
     * Constructor with a Throwable for chained exception.
     * 
     * @param 	exception
     */
    public FrameworkCheckedException( Throwable exception )
    {
        // Set chained exception
        previousThrowable = exception;
        
        init();
    }

    /**
     * Constructor with a Throwable for chained exception and a message.
     * @param message 	text of the exception
     * @param exception Throwable that is the prior chained exception.
     */
    public FrameworkCheckedException( String message, Throwable exception )
    {
        // call base class
        super(message);

        // Set chained exception
        previousThrowable = exception;
        
        init();
    }
    

	/**
	 * Return the log indicator.
	 * @return boolean
	 */
	public boolean getIsLogged()
	{
		return isLogged;	
	}
	
	/**
	 * Assign the log indicator.
	 * @param	logged
	 */    
	public void setisLogged( boolean logged )
	{
		isLogged = logged;
	}
	

	/**
	 * Assign the log indicator to true
	 */    
	public void setisLogged()
	{
		isLogged = true;
	}
		
	
	/**
	 * Return the exception identifier.
	 * @return String
	 */
	public String getExceptionID()
	{
		return exceptionID;
	}
	
	/**
	 * String representation.
	 * @see java.lang.Object#toString()
	 */
	public String toString()
	{
		return ( exceptionID + " : " + super.toString() );
	}	

    /**
     * Prints the stack trace of this exception and any
     * chained exceptions.
     */
    public void printStackTrace()
    {
        // Call base classes' printStackTrace
        super.printStackTrace();

        // If this is a chained exception then call the chained
        // exception's stack trace
        if ( previousThrowable != null )
        {
            previousThrowable.printStackTrace();   
        }
    }

    /**
     * Prints the stack trace of this exception and any
     * chained exceptions to the passed in print stream.
     * @param printStream The print stream to output to.
     */
    public void printStackTrace( PrintStream printStream )
    {
        // Call base classes' printStackTrace
        super.printStackTrace( printStream );

        // If this is a chained exception then call the chained
        // exception's stack trace
        if ( previousThrowable != null )
        {
            previousThrowable.printStackTrace( printStream );   
        }
    }

    /**
     * Prints the stack trace of this exception and any
     * chained exceptions to the passed in print writer.
     * @param printWriter The print writer to output to.
     */
    public void printStackTrace( PrintWriter printWriter )
    {
        // Call base classes' printStackTrace
        super.printStackTrace( printWriter );

        // If this is a chained exception then call the chained
        // exception's stack trace
        if ( previousThrowable != null )
        {
            previousThrowable.printStackTrace( printWriter );   
        }
    }
    
    /**
     * Returns the previously assigned Throwable.  It may be null.
     * @return      Throwable
     */
    public Throwable getChainedException()
    {
        return ( previousThrowable );
    }
    
    /**
     * Returns the matching FrameworkCheckedException found if the fully qualified named 
     * FrameworkCheckedException Class type is in the chain of Throwables.  
     * null means it is not in the chain
     * <p>
     * @param       className
     * @return      FrameworkCheckedException
     */
    public FrameworkCheckedException containsFrameworkCheckedExceptionTypeInChain( String className )
    {
        FrameworkCheckedException returnFrameworkCheckedException   = null;
        FrameworkCheckedException tempFrameworkCheckedException     = null;
        
        if ( previousThrowable != null && previousThrowable instanceof com.framework.common.exception.FrameworkCheckedException )
        {
            tempFrameworkCheckedException = (com.framework.common.exception.FrameworkCheckedException)previousThrowable;
            
            if ( tempFrameworkCheckedException.getClass().getName().equalsIgnoreCase( className ) )
            {
                returnFrameworkCheckedException = tempFrameworkCheckedException;
            }
            else    // ask the contained FrameworkCheckedException
            {
                returnFrameworkCheckedException = tempFrameworkCheckedException.containsFrameworkCheckedExceptionTypeInChain( className );
            }
        }
        
        return( returnFrameworkCheckedException );
    }
     
    
//************************************************************************    
// Private / Protected Methods
//************************************************************************

	/**
	 * initialize the exception, including the creation of an exception id
	 */
	protected void init()
	{
		exceptionID = "000111";//Utility.generateUID();		
		
		//delegate this exception to the generalexception handler hook...
		ICheckedExceptionThrownHook hook = null;
		
        try
        {
        	hook = (ICheckedExceptionThrownHook)FrameworkHookManager.getHookManager().getHook( FrameworkEventType.CheckedExceptionThrown.getEventType() );
        	
			if  ( hook != null )
			{
				hook.process( this );
			}        	
        }
        catch( Throwable exc )
        {
        	// not a whole lot can be done from here...
	    }

	}
	
//************************************************************************    
// Attributes
//************************************************************************

    
    /**
     * The chained exception.
     */
    private Throwable previousThrowable = null;
    
    /**
     * unique exception identifier
     */
    private String exceptionID = null;
    
    /**
     * log indicator
     */
    private boolean isLogged = false;
    
    /**
     * 
     */
//    private ICheckedExceptionThrownHook hook = null;
    
}

/*
 * Change Log:
 * $Log: FrameworkCheckedException.java,v $
 */
